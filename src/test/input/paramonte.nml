!**********************************************************************************************************************************
!**********************************************************************************************************************************
!
!  ParaMonte: plain powerful parallel Monte Carlo library.
!
!  Copyright (C) 2012-present, The Computational Data Science Lab
!
!  This file is part of ParaMonte library. 
!
!  ParaMonte is free software: you can redistribute it and/or modify
!  it under the terms of the GNU Lesser General Public License as published by
!  the Free Software Foundation, version 3 of the License.
!
!  ParaMonte is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU Lesser General Public License for more details.
!
!  You should have received a copy of the GNU Lesser General Public License
!  along with ParaMonte.  If not, see <https://www.gnu.org/licenses/>.
!
!**********************************************************************************************************************************
!**********************************************************************************************************************************

! NOTES:
! Comments must begin with an exclamation mark (!).
! Comments can appear anywhere on an empty line or, after a value assignement.
! The order of the input variables in the ParaDRAM namelist is irrelevant and unimportant.
! Variables can be defined multiple times, but only the last definition will be considered as input.
! All variable names are case insensitive. However, for clarity, this software follows the Camel-Case code-writing practice.
! String values must be enclosed with either single or double quotation marks.
! Logical values are case-insensitive and can be either .true., true, or t for TRUE value, and .false., false, or f for FALSE value.
! All vectors and arrays in the input file begin with index 1, following the convention of the majority of science-oriented programming languages: Fortran, MATLAB, Julia, R, Mathematica

&ParaDRAM

    ! Base

    description                         = "
This\n
    is a\n
        test\n
            run."
   !outputColumnWidth			        = 25
    outputRealPrecision			        = 17
   !outputDelimiter			            = ","
    outputFileName                      = "./out/"
   !sampleSize                          = 111
    randomSeed                          = 2136275,
    chainFileFormat                     = "compact"
   !variableNameList                    = "x","y"
    domainLowerLimitVec                 = 1*-1.e300
    domainUpperLimitVec                 = 1*1.e300
    parallelizationModel                = "single chain"
    targetAcceptanceRate                = 0.23e0
    progressReportPeriod                = 1000
    maxNumDomainCheckToWarn             = 100
    maxNumDomainCheckToStop             = 1000
    inputFileHasPriority                = false
    restartFileFormat                   = "binary"
    silentModeRequested                 = false

    ! MCMC

    chainSize                           = 1000
    startPointVec                       = 1*1.e0
   !sampleRefinementCount               = 10
    sampleRefinementMethod              = "BatchMeans"    ! MaxCumSumAutoCorr
    randomStartPointDomainLowerLimitVec = -100.e0
    randomStartPointDomainUpperLimitVec = 100.0
    randomStartPointRequested           = true

    ! DRAM

    scaleFactor                         = "Gelman"
    proposalModel                       = "normal"
    adaptiveUpdateCount                 = 10000000
    adaptiveUpdatePeriod                = 35
    greedyAdaptationCount               = 0
   !delayedRejectionCount               = 20
   !delayedRejectionScaleFactorVec      = 20*1.
   !burninAdaptationMeasure             = 1.
   !proposalStartStdVec                 = 1*0.0001e6
   !proposalStartCorMat                 = 1000,0,0,1000
   !proposalStartCovMat                 = 1 !,0,0,0.1

/
