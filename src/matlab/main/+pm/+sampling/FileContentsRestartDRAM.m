classdef FileContentsRestartDRAM < pm.sampling.FileContentsRestart
    %
    %   This is the base class for generating objects
    %   that contain the contents of a restart file
    %   generated by a ParaMonte sampler.
    %
    %   This class is meant to be primarily internally
    %   used by the ParaMonte MATLAB library samplers.
    %
    %   \warning
    %
    %       The attributes of this class are considered
    %       internal implementation of the ParaMonte library.
    %       As such, the interface of this class may change
    %       over time.
    %
    %   Parameters
    %   ----------
    %
    %       See the documentation of the class constructor.
    %
    %   Attributes
    %   ----------
    %
    %       See below for information on the attributes (properties).
    %
    %   Methods
    %   -------
    %
    %       See below for information on the methods.
    %
    %   Returns
    %   -------
    %
    %       An object of class ``pm.sampling.FileContentsRestartDRAM``.
    %
    %   Interface
    %   ---------
    %
    %       contents = pm.sampling.FileContentsRestartDRAM(file)
    %       contents = pm.sampling.FileContentsRestartDRAM(file, [])
    %       contents = pm.sampling.FileContentsRestartDRAM(file, silent)
    %
    %   LICENSE
    %   -------
    %
    %       https://github.com/cdslaborg/paramonte/blob/main/LICENSE.md
    %
    properties(Access = public)
        %
        %   proposalCor
        %
        %       The real-valued MATLAB array of rank ``3`` of
        %       shape ``(self.ndim, self.ndim, self.count)`` containing
        %       the set of correlation matrices of the proposal distribution
        %       of the sampler, representing the evolution of the proposal
        %       correlation matrix over the course of the simulation.
        %
        proposalCor = [];
        %
        %   proposalCov
        %
        %       The real-valued MATLAB array of rank ``3`` of
        %       shape ``(1:self.ndim, 1:self.ndim, 1:self.count)`` containing
        %       the set of covariance matrices of the proposal distribution
        %       of the sampler, representing the evolution of the proposal
        %       covariance matrix over the course of the simulation.
        %
        proposalCov = [];
        %
        %   proposalMean
        %
        %       The real-valued MATLAB array of rank ``2`` of
        %       shape ``(1:self.ndim, 1:self.count)`` containing
        %       the set of mean vectors of the proposal distribution
        %       of the sampler, representing the evolution of the proposal
        %       mean over the course of the simulation.
        %
        proposalMean = [];
        %
        %   proposalLogVolume
        %
        %       The real-valued MATLAB array of rank ``1`` of
        %       shape ``(1:self.count)`` containing the set of
        %       ``log(determinant(covmat))`` of the proposal distribution
        %       representing the evolution of mean of proposal distribution
        %       over the course of the simulation.
        %
        proposalLogVolume = [];
        %
        %   meanAcceptanceRateSinceStart
        %
        %       The real-valued MATLAB array of rank ``1`` of
        %       shape ``(1:self.count)`` containing the set of
        %       average MCMC acceptance rates of the sampler proposal
        %       distribution over the course of the simulation.
        %
        meanAcceptanceRateSinceStart = [];
        %
        %   proposalAdaptiveScaleFactorSquared
        %
        %       The real-valued MATLAB array of rank ``1`` of
        %       shape ``(1:self.count)`` containing the set of
        %       adaptive squared scale factors of the sampler proposal
        %       distribution over the course of the simulation.
        %
        proposalAdaptiveScaleFactorSquared = [];
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    methods (Access = public)

        function self = FileContentsRestartDRAM(file, silent)
            %
            %   Return a scalar object of class ``pm.sampling.FileContentsRestartDRAM``.
            %
            %   This is the constructor of the class ``pm.sampling.FileContentsRestartDRAM``.
            %
            %   Parameters
            %   ----------
            %
            %       file
            %
            %           The input scalar MATLAB string
            %           containing the path to an external report file.
            %
            %       silent
            %
            %           See the corresponding argument of ``pm.sampling.FileContentsRestart`` class.
            %           (**optional**. The default is set by ``pm.sampling.FileContentsRestart``.)
            %
            %   Returns
            %   -------
            %
            %       self
            %
            %           The output scalar object of class ``pm.sampling.FileContentsRestartDRAM``.
            %
            %   Interface
            %   ---------
            %
            %       contents = pm.sampling.FileContentsRestartDRAM(file)
            %       contents = pm.sampling.FileContentsRestartDRAM(file, [])
            %       contents = pm.sampling.FileContentsRestartDRAM(file, silent)
            %       contents = pm.sampling.FileContentsRestartDRAM(file, [], [])
            %       contents = pm.sampling.FileContentsRestartDRAM(file, silent, [])
            %       contents = pm.sampling.FileContentsRestartDRAM(file, silent, method)
            %
            %   LICENSE
            %   -------
            %
            %       https://github.com/cdslaborg/paramonte/blob/main/LICENSE.md
            %
            if  nargin < 2
                silent = [];
            end
            self = self@pm.sampling.FileContentsRestart(file, silent, "ParaDRAM");

            % find ndim

            self.ndim = 0;
            rowOffset = 1;
            while ~contains(self.lineList(rowOffset), "proposalMean")
                rowOffset = rowOffset + 1;
                if  self.lineListLen < rowOffset
                    error   ( newline ...
                            + "Failed to detected any field named ""proposalMean""" + newline ...
                            + "in the specified restart file:" + newline ...
                            + newline ...
                            + pm.io.tab + file + newline ...
                            + newline ...
                            + "The file structure may have been compromized." + newline ...
                            + newline ...
                            );
                end
            end
            rowOffset = rowOffset + 1; % the first numeric value of proposalMean.
            while ~isnan(str2double(self.lineList{self.ndim + rowOffset}))
                self.ndim = self.ndim + 1;
            end
            if  self.ndim == 0
                error   ( newline ...
                        + "Failed to infer the value of ``ndim``." + newline ...
                        + "from the specified restart file:" + newline ...
                        + newline ...
                        + pm.io.tab + file + newline ...
                        + newline ...
                        + "The file structure may have been compromized." + newline ...
                        + newline ...
                        );
            end

            % parse the restart file contents.

            self.meanAcceptanceRateSinceStart       = zeros(self.count, 1);
            self.numFuncCall                        = zeros(self.count, 1);
            self.proposalAdaptiveScaleFactorSquared = zeros(self.count, 1);
            self.proposalLogVolume                  = zeros(self.count, 1);
            self.proposalMean                       = zeros(self.ndim, self.count);
            self.proposalCov                        = zeros(self.ndim, self.ndim, self.count);
            self.proposalCor                        = zeros(self.ndim, self.ndim, self.count);
            skip = 10 + self.ndim * (self.ndim + 3) / 2;
            for icount = 1 : self.count
                if mod(icount, 10) == 0
                    self.spinner.spin(icount / self.count);
                end
                istart = (icount - 1) * skip + 1;
                rowOffset = 1; self.meanAcceptanceRateSinceStart        (icount) = str2double(self.lineList(istart + rowOffset));
                rowOffset = 3; self.numFuncCall                         (icount) = str2double(self.lineList(istart + rowOffset));
                rowOffset = 5; self.proposalAdaptiveScaleFactorSquared  (icount) = str2double(self.lineList(istart + rowOffset));
                rowOffset = 7; self.proposalLogVolume                   (icount) = str2double(self.lineList(istart + rowOffset));
                rowOffset = 9;
                iend = istart + rowOffset + self.ndim;
                self.proposalMean(1 : self.ndim, icount) = str2double(self.lineList(istart + rowOffset : iend - 1));
                for idim = 1 : self.ndim % covmat
                    istart = iend + 1;
                    iend = iend + idim;
                    self.proposalCov(1 : idim, idim, icount) = str2double(self.lineList(istart : iend));
                    self.proposalCov(idim, 1 : idim - 1, icount) = self.proposalCov(1 : idim - 1, idim, icount);
                end
                self.proposalCor(:, :, icount) = corrcov(squeeze(self.proposalCov(:, :, icount)));
            end
            self.spinner.spin(1);
            self.checkpoint([]);

        end % constructor

    end % methods (Access = public)

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    methods (Access = public, Hidden)

        function warn(self)
            warning ( newline ...
                    + "The structure of the file:" + newline ...
                    + newline ...
                    + pm.io.tab + self.file + newline ...
                    + newline ...
                    + "does not match a DRAM-class restart file." + newline ...
                    + "The contents of the file may have been compromised." + newline ...
                    + "Verify the integrity of the file contents before attempting a reread." + newline ...
                    );
        end

    end % methods (Access = Hidden)

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end % classdef