classdef FileContentsSample < pm.io.FileContentsTabular
    %
    %   This is the base class for generating objects
    %   that contain the contents of a sample/chain file
    %   generated by a ParaMonte sampler.
    %
    %   This class is meant to be primarily internally
    %   used by the ParaMonte MATLAB library samplers.
    %
    %   Parameters
    %   ----------
    %
    %       See the documentation of the class constructor.
    %
    %   Attributes
    %   ----------
    %
    %       See below for information on the attributes (properties).
    %
    %   Methods
    %   -------
    %
    %       See below for information on the methods.
    %
    %   Returns
    %   -------
    %
    %       An object of class ``pm.sampling.FileContentsSample``.
    %
    %   Interface
    %   ---------
    %
    %       contents = pm.sampling.FileContentsSample(file)
    %       contents = pm.sampling.FileContentsSample(file, [])
    %       contents = pm.sampling.FileContentsSample(file, silent)
    %       contents = pm.sampling.FileContentsSample(file, [], sep)
    %       contents = pm.sampling.FileContentsSample(file, silent, sep)
    %
    %   LICENSE
    %   -------
    %
    %       https://github.com/cdslaborg/paramonte/blob/main/LICENSE.md
    %
    properties(Access = public)
        %
        %   stats
        %
        %       The scalar MATLAB object containing the set of
        %       computed properties of the contents of the file.
        %
        stats = [];
        %
        %   ndim
        %
        %       The scalar MATLAB integer representing the number of
        %       dimensions of the domain of the objective function sampled.
        %       This integer is also the number of columns in the file that
        %       correspond that contain the sampled states from the domain
        %       of the mathematical objective function.
        %
        ndim = 0;
        %
        %   sampleLogFuncColIndex
        %
        %       The scalar MATLAB integer representing the column
        %       index of the dataframe component ``df`` that contains
        %       the natural logarithm of the objective function values
        %       corresponding to the sampled states next to this column,
        %       such that,
        %
        %           FileContentsSample.ndim =
        %           FileContentsSample.ncol -
        %           FileContentsSample.sampleLogFuncColIndex
        %
        %       holds. While this column index can be readily inferred by exploring
        %       the contents of the dataframe component, this column index is also
        %       computed and explicitly offered to conveniently slice the values of
        %       the sampled states and their corresponding log-function values.
        %
        sampleLogFuncColIndex = 0;
    end

    properties(Hidden)
        %
        %   sampleLogFuncColName
        %
        %       The scalar MATLAB string representing the column
        %       name of the dataframe component ``df`` that contains
        %       the natural logarithm of the objective function values
        %       corresponding to the sampled states next to this column.
        %
        sampleLogFuncColName = "sampleLogFunc";
    end

    methods (Access = public)

        function self = FileContentsSample(file, silent, sep)
            %
            %   Return a scalar object of class ``pm.sampling.FileContentsSample``.
            %
            %   This is the constructor of the class ``pm.sampling.FileContentsSample``.
            %
            %   Parameters
            %   ----------
            %
            %       file
            %
            %           The input scalar MATLAB string
            %           containing the path to an external file.
            %
            %       silent
            %
            %           See the corresponding argument of ``pm.sampling.FileContentsRestart`` class.
            %           (**optional**. The default is set by ``pm.sampling.FileContentsRestart``.)
            %
            %       sep
            %
            %           The input scalar MATLAB string
            %           containing the field separator used in the file.
            %           (**optional**, default = ``","``)
            %
            %   Returns
            %   -------
            %
            %       self
            %
            %           The output scalar object of class ``pm.sampling.FileContentsSample``.
            %
            %   Interface
            %   ---------
            %
            %       contents = pm.sampling.FileContentsSample(file)
            %       contents = pm.sampling.FileContentsSample(file, [])
            %       contents = pm.sampling.FileContentsSample(file, silent)
            %       contents = pm.sampling.FileContentsSample(file, [], [])
            %       contents = pm.sampling.FileContentsSample(file, [], sep)
            %       contents = pm.sampling.FileContentsSample(file, silent, [])
            %       contents = pm.sampling.FileContentsSample(file, silent, sep)
            %
            %   LICENSE
            %   -------
            %
            %       https://github.com/cdslaborg/paramonte/blob/main/LICENSE.md
            %
            if nargin < 3
                sep = [];
            end
            if nargin < 2
                silent = [];
            end
            self = self@pm.io.FileContentsTabular(file, silent, sep);

            for icol = 1 : self.ncol
                if strcmpi(self.df.Properties.VariableNames{icol}, self.sampleLogFuncColName)
                    break;
                end
            end
            self.sampleLogFuncColIndex = icol;
            self.ndim = self.ncol - self.sampleLogFuncColIndex;
            if  self.nrow <= self.ndim
                warning ( newline ...
                        + "There are insufficient number of states in the specified file:" + newline ...
                        + newline ...
                        + pm.io.tab() + self.file + newline ...
                        + newline ...
                        + "for computing the covariance/correlation matrices. Skipping..." + newline ...
                        + newline ...
                        );
                return;
            end

            %%%% statistics

            self.stats = struct();

            % Add chain cormat.

            self.checkpoint("computing the sample correlation matrix...", false);
            self.stats.cor = pm.stats.Cor(self.df(:, self.sampleLogFuncColIndex + 1 : end));
            self.checkpoint();

            % Add chain covmat.

            self.checkpoint("computing the sample covariance matrix...", false);
            self.stats.cov = pm.stats.Cov(self.df(:, self.sampleLogFuncColIndex + 1 : end));
            self.checkpoint();

            % Add chain acf.

            self.checkpoint("computing the sample autocorrelation...", false);
            self.stats.acf = pm.stats.AutoCorr(self.df(:, self.sampleLogFuncColIndex : end));
            self.checkpoint();

            self.stats.max = struct("val", [], "loc", []);
            self.stats.min = struct("val", [], "loc", []);
            [self.stats.max.val, self.stats.max.loc] = max(self.df);
            [self.stats.min.val, self.stats.min.loc] = min(self.df);
            self.stats.avg = mean(self.df);
            self.stats.std = std(self.df);

        end

    end

end
