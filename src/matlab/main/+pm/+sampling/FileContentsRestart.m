classdef FileContentsRestart < pm.io.FileContents
    %
    %   This is the base class for generating objects
    %   that contain the contents of a restart file
    %   generated by a ParaMonte sampler.
    %
    %   This class is meant to be primarily internally
    %   used by the ParaMonte MATLAB library samplers.
    %
    %   Parameters
    %   ----------
    %
    %       See the documentation of the class constructor.
    %
    %   Attributes
    %   ----------
    %
    %       See below for information on the attributes (properties).
    %
    %   Methods
    %   -------
    %
    %       See below for information on the methods.
    %
    %   Returns
    %   -------
    %
    %       An object of class ``pm.sampling.FileContentsRestart``.
    %
    %   Interface
    %   ---------
    %
    %       contents = pm.sampling.FileContentsRestart(file)
    %       contents = pm.sampling.FileContentsRestart(file, [])
    %       contents = pm.sampling.FileContentsRestart(file, silent)
    %       contents = pm.sampling.FileContentsRestart(file, [], [])
    %       contents = pm.sampling.FileContentsRestart(file, silent, [])
    %       contents = pm.sampling.FileContentsRestart(file, silent, method)
    %
    %   LICENSE
    %   -------
    %
    %       https://github.com/cdslaborg/paramonte/blob/main/LICENSE.md
    %
    properties(Access = public)
        %
        %   numFuncCall
        %
        %       The scalar MATLAB integer containing the number of
        %       objective function calls made up to any given stage
        %       within the specified restart file.
        %
        numFuncCall = [];
        %
        %   count
        %
        %       The scalar MATLAB integer containing the number of
        %       restart entries in the specified restart file.
        %
        count = [];
        %
        %   ndim
        %
        %       The scalar MATLAB integer containing the number of
        %       dimensions of the domain of the objective function.
        %
        ndim = [];
        %
        %   contents
        %
        %       The scalar MATLAB string containing the entire
        %       contents of the restart file with all Carriage Return
        %       characters removed (relevant only to Windows OS).
        %
        contents = [];
    end

    properties(Hidden)
        method = '';
        lineList = [];
        lineListLen = [];
    end

    methods (Access = public)

        function self = FileContentsRestart(file, silent, method)
            %
            %   Return a scalar object of class ``pm.sampling.FileContentsRestart``.
            %
            %   This is the constructor of the class ``pm.sampling.FileContentsRestart``.
            %
            %   Parameters
            %   ----------
            %
            %       file
            %
            %           The input scalar MATLAB string
            %           containing the path to an external restart file.
            %
            %       silent
            %
            %           See the corresponding argument of ``pm.io.FileContents`` class.
            %           (**optional**. The default is set by ``pm.io.FileContents``.)
            %
            %       method
            %
            %           The input scalar MATLAB string
            %           containing the sampling method name.
            %           The input value must be any of the following:
            %
            %               -   "ParaDRAM"
            %               -   "ParaDISE"
            %               -   "ParaNest"
            %
            %           (**optional**. If missing, some of the restart file contents will not be (properly) parsed.)
            %
            %   Returns
            %   -------
            %
            %       self
            %
            %           The output scalar object of class ``pm.sampling.FileContentsRestart``.
            %
            %   Interface
            %   ---------
            %
            %       contents = pm.sampling.FileContentsRestart(file)
            %       contents = pm.sampling.FileContentsRestart(file, [])
            %       contents = pm.sampling.FileContentsRestart(file, silent)
            %       contents = pm.sampling.FileContentsRestart(file, [], [])
            %       contents = pm.sampling.FileContentsRestart(file, silent, [])
            %       contents = pm.sampling.FileContentsRestart(file, silent, method)
            %
            %   LICENSE
            %   -------
            %
            %       https://github.com/cdslaborg/paramonte/blob/main/LICENSE.md
            %
            if  nargin < 2
                silent = [];
            end
            self = self@pm.io.FileContents(file, silent);
            if  2 < nargin
                self.method = convertStringsToChars(method);
            end

            % remove any CARRIAGE RETURN.

            self.contents = strrep(fileread(file), char(13), '');
            self.lineList = strsplit(self.contents, newline);
            self.lineListLen = length(self.lineList);

            % find the field names in the file.
            %fields = [];
            %for iline = 1 : self.lineListLen
            %    line = self.lineList{iline};
            %    if isletter(line(1))
            %        if ~any(contains(fields, line))
            %            fields = [fields, line];
            %        else
            %            break;
            %        end
            %    end
            %end

            % find the update count in the file.

            self.count = count(self.contents, 'numFuncCall');

        end % constructor

    end % methods (Access = public)

end % classdef