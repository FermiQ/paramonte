%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   ParaMonte: plain powerful parallel Monte Carlo library.
%
%   Copyright (C) 2012-present, The Computational Data Science Lab
%
%   This file is part of the ParaMonte library.
%
%   ParaMonte is free software: you can redistribute it and/or modify it 
%   under the terms of the GNU Lesser General Public License as published 
%   by the Free Software Foundation, version 3 of the License.
%
%   ParaMonte is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%   GNU Lesser General Public License for more details.
%
%   You should have received a copy of the GNU Lesser General Public License
%   along with the ParaMonte library. If not, see, 
%
%       https://github.com/cdslaborg/paramonte/blob/master/LICENSE
%
%   ACKNOWLEDGMENT
%
%   As per the ParaMonte library license agreement terms, 
%   if you use any parts of this library for any purposes, 
%   we ask you to acknowledge the use of the ParaMonte library
%   in your work (education/research/industry/development/...)
%   by citing the ParaMonte library as described on this page:
%
%       https://github.com/cdslaborg/paramonte/blob/master/ACKNOWLEDGMENT.md
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
function out = writeOutput(self)
    
    % if new point has been sampled, write the previous sampled point to output file

    nd          = self.nd.val;
    lastState   = self.Stats.NumFunCall.accepted;

    if  lastState > 0    % blockOutputWrite
        if self.SpecBase.chainFileFormat.isCompact
            fprintf(self.ChainFile.unit , self.ChainFile.format                 ...
                                        , self.Chain.ProcessID  (lastState)     ...
                                        , self.Chain.DelRejStage(lastState)     ...
                                        , self.Chain.MeanAccRate(lastState)     ...
                                        , self.Chain.Adaptation (lastState)     ...
                                        , self.Chain.BurninLoc  (lastState)     ...
                                        , self.Chain.Weight     (lastState)     ...
                                        , self.Chain.LogFunc    (lastState)     ...
                                        , self.Chain.State (1:nd,lastState)     ...
                                        ) ;
        elseif self.SpecBase.chainFileFormat.isBinary
            fprintf(self.ChainFile.unit , self.ChainFile.format                 ...
                                        , self.Chain.ProcessID  (lastState)     ...
                                        , self.Chain.DelRejStage(lastState)     ...
                                        , self.Chain.MeanAccRate(lastState)     ...
                                        , self.Chain.Adaptation (lastState)     ...
                                        , self.Chain.BurninLoc  (lastState)     ...
                                        , self.Chain.Weight     (lastState)     ...
                                        , self.Chain.LogFunc    (lastState)     ...
                                        , self.Chain.State (1:nd,lastState)     ...
                                        ) ;
        elseif self.SpecBase.chainFileFormat.isVerbose
            for j = 1 : self.Chain.Weight(lastState)
            fprintf(self.ChainFile.unit , self.ChainFile.format                 ...
                                        , self.Chain.ProcessID  (lastState)     ...
                                        , self.Chain.DelRejStage(lastState)     ...
                                        , self.Chain.MeanAccRate(lastState)     ...
                                        , self.Chain.Adaptation (lastState)     ...
                                        , self.Chain.BurninLoc  (lastState)     ...
                                        , 1                                     ...
                                        , self.Chain.LogFunc    (lastState)     ...
                                        , self.Chain.State (1:nd,lastState)     ...
                                        ) ;
            end
        end
    end % blockOutputWrite

end